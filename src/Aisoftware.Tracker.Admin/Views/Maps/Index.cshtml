@model Aisoftware.Tracker.Borders.ViewModels.DashboardViewModel
@using Aisoftware.Tracker.Borders.Models.Devices

<!-- Leaflet lib (open street map)-->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.8.0/leaflet.min.css" integrity="sha512-oIQ0EBio8LJupRpgmDsIsvm0Fsr6c3XNHLB7at5xb+Cf6eQuCX9xuX8XXGRIcokNgdqL1ms7nqbQ6ryXMGxXpg==" crossorigin="anonymous" referrerpolicy="no-referrer" /><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.8.0/leaflet.min.css" integrity="sha512-oIQ0EBio8LJupRpgmDsIsvm0Fsr6c3XNHLB7at5xb+Cf6eQuCX9xuX8XXGRIcokNgdqL1ms7nqbQ6ryXMGxXpg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.8.0/leaflet.min.js" integrity="sha512-TL+GX2RsOUlTndpkgHVnSQ9r6zldqHzfyECrdabkpucdFroZ3/HAhMmP2WYaPjsJCoot+0McmdPOLjmmicG9qg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- /Leaflet lib (open street map) -->

<section class="content-header">
    <h1>
        Posicionamento no Mapa
    </h1>
    <ol class="breadcrumb">
        <li><a href="/"><i class="fa fa-dashboard"></i> Dashboard</a></li>
        <li class="active">Posicionamento no Mapa</li>
    </ol>
</section>
<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-xs-12">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Posicionamento dos Dispositivos</h3>
                </div>
                <!-- /.box-header -->
                <div class="box-body chart-responsive">
                    <div id="map" style="height: 75vh; position: relative;"></div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /.box -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</section>

<style>
    #map {
        height: 180px;
        position: relative;
    }
</style>
<script>

    const MULTIPLIER = 60000;
    let min = 10;
    ms = MULTIPLIER * min;

    setTimeout(function () {
        window.location.reload(1);
    }, ms);

    //maps
    var map = L.map('map').setView([-19.4181671, -51.476252], 5);

    var tiles = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
      maxZoom: 25,
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, ' +
        'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
      id: 'mapbox/streets-v11',
      tileSize: 512,
      zoomOffset: -1
    }).addTo(map);

    @if(!string.IsNullOrEmpty(@Model.LatLong))
    {
        string latlngs = @Model.LatLong;
        <text>
            var position = @latlngs;
            var polyline = L.polyline(position, {color: 'red'}).addTo(map);

            map.fitBounds(polyline.getBounds());

            map.on('click', onMapClick);
        </text>
    }

    @if(Model.Positions != null)
    {
        foreach(var item in Model.Positions)   
        {
            string nameIcon = @Model.Devices.Where(d => d.Id == item.DeviceId).FirstOrDefault().Category;
            string icon = @Category.GetIcons()[nameIcon ?? "null"].ToString();
            string onOf = @Model.Devices.Where(d => d.Id == item.DeviceId).FirstOrDefault().Status == "online" ? "on" : "off";
            string clazz = icon + " " + onOf; 
            string deviceName = @Model.Devices.Where(d => d.Id == item.DeviceId).FirstOrDefault().Name;
            string positionAddress = @item.Address;
            string urlMap = "https://www.google.com/maps/place/" + @item.Latitude + "," + @item.Longitude + "/@" + @item.Latitude + "," + @item.Longitude + ",17z";

        <text>
                var lat = @item.Latitude.ToString().Replace(",", ".");
                var long = @item.Longitude.ToString().Replace(",", ".");

                var icon = '@icon';

                var myIcon = L.divIcon({
                    className: '@clazz',
                    iconSize: [38, 95],
                    iconAnchor: [22, 94],
                    popupAnchor: [-3, -76],
                    shadowSize: [68, 95],
                    shadowAnchor: [22, 94]
                });

                var marker = L.marker([lat, long], { icon: myIcon }).addTo(map);
                
                marker.bindPopup("<b>Dispositivo:</b> @deviceName <br> <b>Ultimo endereço:</b> @positionAddress <br><b>Visualizar:</b> <a href= @urlMap target='_blank'>Ver no Google maps</a>").openPopup();
            
            </text>
        }
    }

    @* var circle = L.circle([51.508, -0.11], {
      color: 'red',
      fillColor: '#f03',
      fillOpacity: 0.5,
      radius: 500
    }).addTo(map);

    var polygon = L.polygon([
      [51.509, -0.08],
      [51.503, -0.06],
      [51.51, -0.047],
      [51.54, -0.050]
    ]).addTo(map); *@

    @* circle.bindPopup("I am a circle.");
    polygon.bindPopup("I am a polygon."); *@

    var popup = L.popup();

    function onMapClick(e) {
      popup
        .setLatLng(e.latlng)
        .setContent("Latitude e longitude " + e.latlng.toString())
        .openOn(map);
    }

   
</script>